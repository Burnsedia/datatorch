// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prisma_client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

generator datatorch_prisma {
  provider        = "prisma-client-js"
  output          = "../../js/db"
  previewFeatures = ["referentialActions"]

}

generator nexusPrisma {
  provider = "nexus-prisma"
}

/// An owner of one or more projects.
model ProjectOwner {
  id                      String                   @id @default(uuid())
  name                    String                   @default("")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now())
  lastSeenAt              DateTime                 @default(now())
  disabled                Boolean                  @default(false)
  type                    ProjectOwnerType
  role                    Role                     @default(USER)
  userCredentials         UserCredentials?
  profile                 Profile?
  projects                Project[]
  apiKeys                 ApiKey[]
  articleDrafts           ArticleDraft[]
  userArticleInteractions UserArticleInteraction[]
}

model UserCredentials {
  id             String       @id @default(uuid())
  email          String       @unique
  login          String       @unique
  password       String
  count          Int          @default(0)
  isVerified     Boolean      @default(false)
  projectOwner   ProjectOwner @relation(fields: [projectOwnerId], references: [id], onDelete: Cascade)
  projectOwnerId String       @unique
}

model Profile {
  id             String       @id @default(uuid())
  projectOwner   ProjectOwner @relation(fields: [projectOwnerId], references: [id])
  projectOwnerId String       @unique
  publicEmail    String?
  company        String?
  avatarUrl      String?
  websiteUrl     String?
  description    String?
  location       String?
  githubId       String?
  facebookId     String?
  twitterId      String?
}

model Project {
  id             String            @id @default(uuid())
  projectOwner   ProjectOwner      @relation(fields: [projectOwnerId], references: [id])
  projectOwnerId String
  slug           String
  name           String
  about          String            @default("")
  description    String            @default("")
  visibility     ProjectVisibility @default(PRIVATE)
  isArchived     Boolean           @default(false)
  avatarUrl      String?
  nsfw           Boolean
  projectRole    ProjectRole[]
  ArticleDraft   ArticleDraft[]
}

model ProjectRole {
  id          String  @id @default(uuid())
  name        String
  description String
  project     Project @relation(fields: [projectId], references: [id])
  projectId   String
}

model ApiKey {
  id             String       @id @default(uuid())
  key            String
  name           String
  projectOwner   ProjectOwner @relation(fields: [projectOwnerId], references: [id])
  projectOwnerId String
  createdAt      DateTime     @default(now())
  lastAccessedAt DateTime     @default(now())
}

// An abstraction of any type of article or comment.
model ArticleDraft {
  id                       String       @id @default(uuid())
  author                   ProjectOwner @relation(fields: [authorId], references: [id])
  authorId                 String
  project                  Project?     @relation(fields: [projectId], references: [id])
  projectId                String?
  replacedByArticleDraftId String?
  isPublished              Boolean      @default(false)
  createdAt                DateTime     @default(now())
  lastSaved                DateTime     @default(now())
  publishedAt              DateTime?
  title                    String?
  content                  String?
  articlePost              ArticlePost?
  articlePostId            String?
}

// Data for the published version of the article or comment
model ArticlePost {
  id                      String                   @id @default(uuid())
  articleDraft            ArticleDraft             @relation(fields: [articleDraftId], references: [id])
  articleDraftId          String
  publication             String                   @default("Default")
  createdAt               DateTime                 @default(now())
  lastActivity            DateTime                 @default(now())
  postType                ArticlePostType
  childOf                 ArticlePost?             @relation(fields: [parentId], references: [id])
  parentId                String?
  children                ArticlePost[]            @relation("ArticlePostToArticlePost")
  upvotes                 Int                      @default(0)
  downvotes               Int                      @default(0)
  views                   Int                      @default(0)
  isTop                   Boolean?
  isVerified              Boolean?
  userArticleInteractions UserArticleInteraction[]
}

enum ArticlePostType {
  DISCUSSION
  QUESTION
  CLASSIFIED
}

model UserArticleInteraction {
  id              String                     @id @default(uuid())
  projectOwner    ProjectOwner               @relation(fields: [projectOwnerId], references: id)
  projectOwnerId  String
  article         ArticlePost                @relation(fields: [articleId], references: id)
  articleId       String
  interactionTime DateTime
  interactionType UserArticleInteractionType
}

enum UserArticleInteractionType {
  VIEW
  UPVOTE
  DOWNVOTE
  RESPONSE
}

enum Role {
  SUPERUSER
  ADMIN
  MODERATOR
  USER
  ANNOTATOR
  GUEST
}

enum ProjectOwnerType {
  USER
  ORGANIZATION
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
}
